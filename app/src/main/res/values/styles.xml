<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light">
        <!-- Customize your theme here. -->

        <item name="actionBarIconColor">#fff</item>
        <item name="actionBarInsetStart">@dimen/keyline_2</item>
        <item name="spinnerBarInsetStart">@dimen/keyline_2_minus_16dp</item>
        <item name="popupItemBackground">?android:selectableItemBackground</item>
        <item name="photoItemForeground">?android:selectableItemBackground</item>
        <item name="photoItemForegroundBorderless">?android:selectableItemBackground</item>


        <item name="colorPrimary">@color/theme_primary</item>
        <item name="colorPrimaryDark">@color/theme_primary_dark</item>
        <item name="colorAccent">@color/theme_accent_2</item>

        <item name="android:textColorLink">@color/theme_accent_2</item>

        <item name="windowActionBar">false</item>
        <item name="android:windowNoTitle">true</item>

        <item name="android:windowContentOverlay">@null</item>
        <item name="android:windowBackground">@android:color/white</item>

        <!--<item name="android:popupMenuStyle">@style/Widget.IOSched.PopupMenu</item>
        <item name="android:listPopupWindowStyle">@style/Widget.IOSched.PopupMenu</item>
        <item name="android:dropDownListViewStyle">@style/Widget.IOSched.ListView.DropDown</item>
        <item name="android:textAppearanceLargePopupMenu">@style/TextAppearance.LargePopupMenu</item>-->

    </style>

    <style name="AppThemeDrawer" parent="AppTheme"/>


    <style name="TransparentTheme" parent="@style/AppTheme">
        <item name="android:windowIsTranslucent">true</item>
        <item name="android:windowBackground">@android:color/transparent</item>
        <item name="android:windowContentOverlay">@null</item>
        <!--<item name="android:windowNoTitle">true</item>-->
        <!--<item name="android:windowIsFloating">true</item>-->
        <!--<item name="android:backgroundDimEnabled">false</item>-->
    </style>


    <style name="HeaderBar">
        <item name="android:background">?colorPrimary</item>
        <item name="android:elevation">@dimen/headerbar_elevation</item>
    </style>


    <style name="ActionBarThemeOverlay" parent="">
        <item name="android:textColorPrimary">#fff</item>
        <item name="colorControlNormal">?actionBarIconColor</item>
        <item name="colorControlHighlight">#3fff</item>
    </style>

    <style name="ActionBarPopupThemeOverlay" parent="ThemeOverlay.AppCompat.Light" />


    <style name="ActionBar.TitleText" parent="TextAppearance.AppCompat.Widget.ActionBar.Title">
        <item name="android:textColor">#fff</item>
        <item name="android:textSize">18sp</item>
    </style>

    <style name="TabIndicator" />

    <style name="Theme.Transparent" parent="Theme.AppCompat.Light.NoActionBar">
        <item name="android:windowIsTranslucent">true</item>
        <item name="android:windowBackground">@android:color/transparent</item>
        <!--<item name="android:windowContentOverlay">@null</item>-->
        <item name="android:windowNoTitle">true</item>
        <!--<item name="android:windowIsFloating">true</item>-->
        <item name="android:backgroundDimEnabled">false</item>

    </style>



    <declare-styleable name="FloatingActionButton">
        <attr name="actionIcon" format="reference" />
        <attr name="actionColor" format="color" />
    </declare-styleable>



    <declare-styleable name="FrameLayoutCompat">
        <!-- Defines the drawable to draw over the content. This can be used as an overlay.
             The foreground drawable participates in the padding of the content if the gravity
             is set to fill. -->
        <attr name="foreground" format="reference|color" />
        <!-- Defines the gravity to apply to the foreground drawable. The gravity defaults
             to fill. -->
        <attr name="foregroundGravity">
            <!-- Push object to the top of its container, not changing its size. -->
            <flag name="top" value="0x30" />
            <!-- Push object to the bottom of its container, not changing its size. -->
            <flag name="bottom" value="0x50" />
            <!-- Push object to the left of its container, not changing its size. -->
            <flag name="left" value="0x03" />
            <!-- Push object to the right of its container, not changing its size. -->
            <flag name="right" value="0x05" />
            <!-- Place object in the vertical center of its container, not changing its size. -->
            <flag name="center_vertical" value="0x10" />
            <!-- Grow the vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill_vertical" value="0x70" />
            <!-- Place object in the horizontal center of its container, not changing its size. -->
            <flag name="center_horizontal" value="0x01" />
            <!-- Grow the horizontal size of the object if needed so it completely fills its container. -->
            <flag name="fill_horizontal" value="0x07" />
            <!-- Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. -->
            <flag name="center" value="0x11" />
            <!-- Grow the horizontal and vertical size of the object if needed so it completely fills its container. -->
            <flag name="fill" value="0x77" />
            <!-- Additional option that can be set to have the top and/or bottom edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the vertical gravity: a top gravity will clip the bottom
                 edge, a bottom gravity will clip the top edge, and neither will clip both edges. -->
            <flag name="clip_vertical" value="0x80" />
            <!-- Additional option that can be set to have the left and/or right edges of
                 the child clipped to its container's bounds.
                 The clip will be based on the horizontal gravity: a left gravity will clip the right
                 edge, a right gravity will clip the left edge, and neither will clip both edges. -->
            <flag name="clip_horizontal" value="0x08" />
        </attr>
        <!-- Defines whether the foreground drawable should be drawn inside the padding.
             This property is turned on by default. -->
        <attr name="foregroundInsidePadding" format="boolean" />
        <!-- Determines whether to measure all children or just those in
             the VISIBLE or INVISIBLE state when measuring. Defaults to false. -->
        <attr name="measureAllChildren" format="boolean" />
        <!-- Tint to apply to the foreground. -->
        <attr name="foregroundTint" format="color" />
        <!-- Blending mode used to apply the foreground tint. -->
        <attr name="foregroundTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
            <!-- Combines the tint and drawable color and alpha channels, clamping the
                 result to valid color values. Saturate(S + D) -->
            <enum name="add" value="16" />
        </attr>
    </declare-styleable>


    <style name="EditTextHeadlineTheme" parent="Base.Widget.AppCompat.EditText">
        <item name="colorControlNormal">#33ffffff</item>
        <item name="colorControlActivated">@android:color/white</item>
        <item name="colorControlHighlight">@android:color/white</item>
    </style>

    <style name="EditTextHeadline" parent="Base.Widget.AppCompat.EditText">
        <item name="android:textColor">#fff</item>
        <item name="android:textColorHint">#33ffffff</item>
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Headline</item>
        <item name="android:inputType">textCapSentences</item>

        <item name="colorControlNormal">#33ffffff</item>
        <item name="colorControlActivated">@android:color/white</item>
        <item name="colorControlHighlight">@android:color/white</item>
        <item name="colorAccent">@android:color/white</item>

    </style>

    <style name="EditTextSubhead" parent="Base.Widget.AppCompat.EditText">
        <item name="android:textColor">#fff</item>
        <item name="android:textColorHint">#33ffffff</item>
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Subhead</item>
        <item name="android:inputType">textCapSentences</item>
    </style>

    <declare-styleable name="ScrimInsetsView">
        <attr name="insetForeground" format="reference|color" />
    </declare-styleable>
</resources>
